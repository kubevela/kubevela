# =============================================================================
# E2E Upgrade Multicluster Test Workflow
# =============================================================================
# This workflow performs end-to-end testing for KubeVela multicluster upgrades.
# It tests the upgrade path from the latest released version to the current
# development branch across multiple Kubernetes versions.
#
# Test Flow:
# 1. Install latest KubeVela release
# 2. Build and upgrade to current development version
# 3. Run multicluster e2e tests to verify functionality
# =============================================================================

name: E2E Upgrade Multicluster Test

# =============================================================================
# Trigger Configuration
# =============================================================================
on:
  # Trigger on pushes to main branches and release branches
  push:
    branches:
      - master
      - release-*
  # Trigger on pull requests targeting main branches
  pull_request:
    branches:
      - master
      - release-*

  # Allow manual workflow execution
  workflow_dispatch: {}

# =============================================================================
# Security Configuration
# =============================================================================
permissions:
  contents: read  # Read-only access to repository contents

# =============================================================================
# Global Environment Variables
# =============================================================================
env:
  GO_VERSION: '1.23.8'  # Go version for building and testing

# =============================================================================
# Job Definitions
# =============================================================================
jobs:
  upgrade-multicluster-tests:
    name: Upgrade Multicluster Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 60  # Prevent hanging jobs

    # ==========================================================================
    # Matrix Strategy - Test against multiple Kubernetes versions
    # ==========================================================================
    strategy:
      fail-fast: false  # Continue testing other versions if one fails
      matrix:
        k8s-version: ['v1.31.9']

    # ==========================================================================
    # Concurrency Control - Prevent overlapping runs
    # ==========================================================================
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.k8s-version }}
      cancel-in-progress: true

    steps:
      # ========================================================================
      # Environment Setup
      # ========================================================================

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate version detection


      # ========================================================================
      # Kubernetes Cluster Setup
      # ========================================================================

      - name: Setup KinD clusters for multicluster testing
        run: |
          # Install KinD (Kubernetes in Docker)
          go install sigs.k8s.io/kind@v0.29.0
          
          # Create worker cluster for multicluster setup
          echo "Creating worker cluster..."
          kind delete cluster --name worker || true
          kind create cluster \
            --name worker \
            --image=kindest/node:${{ matrix.k8s-version }} \
            --wait=300s
          
          # Export worker cluster kubeconfig
          kind export kubeconfig \
            --internal \
            --name worker \
            --kubeconfig /tmp/worker.kubeconfig
          
          # Create main cluster
          echo "Creating main cluster..."
          kind delete cluster || true
          kind create cluster \
            --image=kindest/node:${{ matrix.k8s-version }} \
            --wait=300s

      # ========================================================================
      # KubeVela Installation (Latest Release)
      # ========================================================================

      - name: Get latest KubeVela release version
        id: get_latest_tag
        run: |
          # Fetch latest release tag from GitHub API
          TAG=$(curl -s https://api.github.com/repos/kubevela/kubevela/releases/latest | \
                jq -r ".tag_name" | \
                sed 's/^v//')  # Remove 'v' prefix
          
          echo "Latest KubeVela version: $TAG"
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Add KubeVela Helm repository
        run: |
          # Add official KubeVela Helm chart repository
          helm repo add kubevela https://kubevela.github.io/charts
          helm repo update

      - name: Install KubeVela ${{ env.LATEST_TAG }}
        run: |
          # Install latest stable KubeVela version
          echo "Installing KubeVela version ${{ env.LATEST_TAG }}..."
          helm install \
            --create-namespace \
            --namespace vela-system \
            kubevela kubevela/vela-core \
            --version ${{ env.LATEST_TAG }} \
            --timeout 10m \
            --wait

      - name: Verify KubeVela installation
        run: |
          # Check pod status and deployment rollout
          echo "Checking KubeVela installation status..."
          kubectl get pods -n vela-system
          kubectl rollout status deployment/kubevela-vela-core \
            -n vela-system \
            --timeout=300s

      # ========================================================================
      # Development Image Build and Upgrade
      # ========================================================================

      - name: Generate commit-based image tag
        id: commit_hash
        run: |
          # Create unique tag based on Git commit hash
          COMMIT_HASH="git-$(git rev-parse --short HEAD)"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
          echo "Using image tag: $COMMIT_HASH"

      - name: Build and load development Docker image
        run: |
          # Create temporary directory for Docker build
          mkdir -p $HOME/tmp/
          
          # Build development image with current code changes
          echo "Building development image: vela-core-test:${{ env.COMMIT_HASH }}"
          docker build \
            -t vela-core-test:${{ env.COMMIT_HASH }} \
            -f Dockerfile .
          
          # Load image into KinD cluster for testing
          echo "Loading image into KinD cluster..."
          TMPDIR=$HOME/tmp/ kind load docker-image vela-core-test:${{ env.COMMIT_HASH }}

      - name: Upgrade KubeVela to development version
        run: |
          # Upgrade existing installation to use development image
          echo "Upgrading KubeVela to development version..."
          helm upgrade kubevela ./charts/vela-core \
            --namespace vela-system \
            --set image.repository=vela-core-test \
            --set image.tag=${{ env.COMMIT_HASH }} \
            --set image.pullPolicy=IfNotPresent \
            --timeout 5m \
            --wait \
            --debug

      - name: Verify upgrade completion
        run: |
          # Verify successful upgrade to development image
          echo "Verifying upgrade to development image..."
          kubectl get pods -n vela-system
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/kubevela-vela-core \
            -n vela-system \
            --timeout=300s
          
          # Confirm correct image is deployed
          echo "Deployed image version:"
          kubectl get deployment kubevela-vela-core \
            -n vela-system \
            -o jsonpath='{.spec.template.spec.containers[0].image}'
          echo

      - name: Run upgarde multicluster tests
        uses: ./.github/actions/multicluster-test
        with:
          codecov-enable: false
          codecov-token: ''