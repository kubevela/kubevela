# =============================================================================
# Upgrade E2E Test Workflow
# =============================================================================
# This workflow performs comprehensive end-to-end testing for KubeVela upgrades.
# It validates the upgrade path from the latest stable release to the current
# development version by running multiple test suites including API, addon,
# and general e2e tests.
#
# Test Flow:
# 1. Install latest KubeVela release
# 2. Build and upgrade to current development version
# 3. Run comprehensive e2e test suites (API, addon, general)
# 4. Validate upgrade functionality and compatibility
# =============================================================================

name: Upgrade E2E Test

# =============================================================================
# Trigger Configuration
# =============================================================================
on:
  # Trigger on pushes to main branches and release branches
  push:
    branches:
      - master
      - release-*

  # Trigger on pull requests targeting main branches
  pull_request:
    branches:
      - master
      - release-*

  # Allow manual workflow execution
  workflow_dispatch: {}

# =============================================================================
# Environment Variables
# =============================================================================
env:
  GO_VERSION: '1.23.8'

# =============================================================================
# Security Configuration
# =============================================================================
permissions:
  contents: read  # Read-only access to repository contents

# =============================================================================
# Job Definitions
# =============================================================================
jobs:
  upgrade-tests:
    name: Upgrade E2E Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 90  # Extended timeout for comprehensive e2e testing

    # ==========================================================================
    # Matrix Strategy - Test against multiple Kubernetes versions
    # ==========================================================================
    strategy:
      fail-fast: false  # Continue testing other versions if one fails
      matrix:
        k8s-version: ['v1.31.9']

    # ==========================================================================
    # Concurrency Control - Prevent overlapping runs
    # ==========================================================================
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.k8s-version }}
      cancel-in-progress: true

    steps:
      # ========================================================================
      # Repository Setup
      # ========================================================================
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ========================================================================
      # Kubernetes Cluster Setup
      # ========================================================================
      - name: Setup KinD with Kubernetes ${{ matrix.k8s-version }}
        run: |
          # Install KinD (Kubernetes in Docker)
          go install sigs.k8s.io/kind@v0.29.0

          # Clean up any existing cluster and create new one
          kind delete cluster || true
          kind create cluster \
            --image=kindest/node:${{ matrix.k8s-version }} \
            --wait=300s

      - name: Build vela CLI
        run: make vela-cli

      - name: Build kubectl-vela plugin
        run: make kubectl-vela

      - name: Install kustomize
        run: make kustomize

      # ========================================================================
      # KubeVela Installation (Latest Release)
      # ========================================================================
      - name: Get latest KubeVela release tag (no v prefix)
        id: get_latest_tag
        run: |
          # Fetch latest release tag from GitHub API and remove 'v' prefix
          TAG=$(curl -s https://api.github.com/repos/kubevela/kubevela/releases/latest | \
                jq -r ".tag_name" | \
                awk '{sub(/^v/, ""); print}')
          echo "Latest KubeVela version: $TAG"
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Add KubeVela Helm repo
        run: |
          # Add official KubeVela Helm chart repository
          helm repo add kubevela https://kubevela.github.io/charts
          helm repo update

      - name: Install KubeVela ${{ env.LATEST_TAG }}
        run: |
          # Install latest stable KubeVela version
          echo "Installing KubeVela version ${{ env.LATEST_TAG }}..."
          helm install \
            --create-namespace \
            -n vela-system \
            kubevela kubevela/vela-core \
            --version ${{ env.LATEST_TAG }} \
            --timeout 10m \
            --wait

      - name: Post-install status
        run: |
          # Verify KubeVela installation status
          echo "Checking KubeVela installation status..."
          kubectl get pods -n vela-system
          kubectl rollout status deployment/kubevela-vela-core \
            -n vela-system \
            --timeout=300s

      # ========================================================================
      # Development Image Build and Upgrade
      # ========================================================================
      - name: Get commit hash
        id: commit_hash
        run: |
          # Generate unique tag based on Git commit hash
          COMMIT_HASH="git-$(git rev-parse --short HEAD)"
          echo "Using image tag: $COMMIT_HASH"
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

      - name: Build and load Docker image
        run: |
          echo "Building development image: vela-core-test:${{ env.COMMIT_HASH }}"
          docker build --no-cache \
            -t vela-core-test:${{ env.COMMIT_HASH }} \
            -f Dockerfile .

          echo "Loading image into KinD cluster..."
          kind load docker-image vela-core-test:${{ env.COMMIT_HASH }}

      - name: Pre-apply CRDs from target chart (upgrade-safe)
        run: |
          CRD_DIR="charts/vela-core/crds"

          echo "Applying CRDs idempotently..."
          kubectl apply -f "${CRD_DIR}"

      - name: Upgrade KubeVela to local image
        run: |
          # Upgrade existing installation to use development image
          echo "Upgrading KubeVela to development version..."
          helm upgrade kubevela ./charts/vela-core \
            --namespace vela-system \
            --set image.repository=vela-core-test \
            --set image.tag=${{ env.COMMIT_HASH }} \
            --set image.pullPolicy=IfNotPresent \
            --timeout 5m \
            --wait \
            --debug

      - name: Post-upgrade status
        run: |
          # Verify successful upgrade to development image
          echo "Verifying upgrade to local development image..."
          kubectl get pods -n vela-system

          # Wait for deployment to be ready
          kubectl rollout status deployment/kubevela-vela-core \
            -n vela-system \
            --timeout=300s

          # Confirm correct image is deployed
          echo "Checking deployed image version..."
          kubectl get deployment kubevela-vela-core \
            -n vela-system \
            -o yaml | grep "image:" | head -1

      # ========================================================================
      # E2E Test Execution
      # ========================================================================
      - name: Run upgrade e2e tests
        uses: ./.github/actions/upgrade-e2e-test