apiVersion: v1
kind: ConfigMap
metadata:
  name: component-pod-view
  namespace: {{.Values.systemDefinitionNamespace}}
data:
  template: |
    import (
      "vela/ql"
      "vela/op"
    )

    parameter: {
      name:          string
      namespace:     string
      componentName: string
      cluster:       *"" | string
    }

    appList: ql.#ListResourcesInApp & {
      app: {
        name:      parameter.name
        namespace: parameter.namespace
        components: [parameter.componentName]
        cluster: parameter.cluster
      }
    }

    if appList.err == _|_ {
      appRev:         appList.list[0].revision
      appPublishVersion: appList.list[0].publishVersion
      resources:      appList.list[0].components[0].resources
      collectedPods:  op.#Steps & {
        for i, resource in resources {
          "\(i)": ql.#CollectPods & {
            value:   resource.object
            cluster: resource.cluster
          }
        }
      }

      podsWithCluster: [ for pods in collectedPods for podObj in pods.list {
        cluster: pods.cluster
        obj:     podObj
      }]

      status: {
        podList: [ for pod in podsWithCluster {
          clusterName:    pod.cluster
          revision:       appRev
          publishVersion: appPublishVersion
          podName:        pod.obj.metadata.name
          status:         pod.obj.status.phase
          // refer to https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase
          if status != "Pending" && status != "Unknown" {
            podIP:    pod.obj.status.podIP
            hostIP:   pod.obj.status.hostIP
            nodeName: pod.obj.spec.nodeName
          }
        }]
      }
    }

    if appList.err != _|_ {
      status: {
        error: appList.err
      }
    }


