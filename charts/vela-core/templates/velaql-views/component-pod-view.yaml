apiVersion: v1
kind: ConfigMap
metadata:
  name: component-pod-view
  namespace: {{.Values.systemDefinitionNamespace}}
data:
  template: |
    import (
      "vela/ql"
      "vela/op"
      "list"
    )

    parameter: {
      name:          string
      namespace:     string
      componentName: string
    }

    appList: ql.#ListResourcesInApp & {
      app: {
        name:      parameter.name
        namespace: parameter.namespace
        components: [parameter.componentName]
      }
    }

    if appList.err == _|_ {
      appRev:      appList.list[0].revision
      resources:     appList.list[0].components[0].resources
      collectedPods: op.#Steps & {
        for i, resource in resources {
          "\(i)": ql.#CollectPods & {
            value:   resource.object
            cluster: resource.cluster
          }
        }
      }
      
      podsWithCluster: {for i, pods in collectedPods {
        "\(i)": [
          for podObj in pods.list {
            cluster: pods.cluster
            obj:     podObj
          },
        ]
      }}

      flatPods: list.FlattenN([ for pods in podsWithCluster {
        pods
      }], 1)

      status: {
        podList: [ for pod in flatPods {
          clusterName: pod.cluster
          revision:    appRev
          podName:     pod.obj.metadata.name
          podIP:       pod.obj.status.podIP
          status:      pod.obj.status.phase
          hostIP:      pod.obj.status.hostIP
          nodeName:    pod.obj.spec.nodeName
        }]
      }
    }

    if appList.err != _|_ {
      status: {
        error: appList.err
      }
    }