# Code generated by KubeVela templates. DO NOT EDIT. Please edit the original cue file.
# Definition source cue file: vela-templates/definitions/internal/config-image-registry.cue
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    custom.definition.oam.dev/alias.config.oam.dev: Image Registry
    definition.oam.dev/description: Config information to authenticate image registry
  labels:
    custom.definition.oam.dev/catalog.config.oam.dev: velacore-config
    custom.definition.oam.dev/multi-cluster.config.oam.dev: "true"
    custom.definition.oam.dev/type.config.oam.dev: image-registry
  name: config-image-registry
  namespace: {{ include "systemDefinitionNamespace" . }}
spec:
  schematic:
    cue:
      template: |
        import (
        	"encoding/base64"
        	"encoding/json"
        )

        output: {
        	apiVersion: "v1"
        	kind:       "Secret"
        	metadata: {
        		name:      parameter.name
        		namespace: context.namespace
        		labels: {
        			"config.oam.dev/catalog":       "velacore-config"
        			"config.oam.dev/type":          "image-registry"
        			"config.oam.dev/multi-cluster": "true"
        			"config.oam.dev/identifier":    parameter.registry
        		}
        	}
        	type: "kubernetes.io/dockerconfigjson"
        	stringData: {
        		if parameter.type == "account" {
        			".dockerconfigjson": json.Marshal({
        				auths: "\(parameter.registry)": {
        					username: parameter.username
        					password: parameter.password
        					if parameter.email != _|_ {
        						email: parameter.email
        					}
        					auth: base64.Encode(null, (parameter.username + ":" + parameter.password))
        				}
        			})
        		}
        	}
        }
        parameter: {
        	// +usage=Config name
        	name: string
        	// +usage=Private Image registry FQDN
        	registry: string
        	// +usage=Config type
        	type: "account"
        	if type == "account" {
        		// +usage=Private Image registry username
        		username: string
        		// +usage=Private Image registry password
        		password: string
        		// +usage=Private Image registry email
        		email?: string
        	}
        }
  workload:
    type: autodetects.core.oam.dev

