# Code generated by KubeVela templates. DO NOT EDIT. Please edit the original cue file.
# Definition source cue file: vela-templates/definitions/internal/config-image-registry.cue
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    alias.config.oam.dev: Image Registry
    definition.oam.dev/description: Config information to authenticate image registry
  labels:
    catalog.config.oam.dev: velacore-config
    custom.definition.oam.dev/ui-hidden: "true"
    multi-cluster.config.oam.dev: "true"
    type.config.oam.dev: image-registry
  name: config-image-registry
  namespace: {{ include "systemDefinitionNamespace" . }}
spec:
  schematic:
    cue:
      template: |
        import (
        	"encoding/base64"
        	"encoding/json"
        	"strconv"
        )

        output: {
        	apiVersion: "v1"
        	kind:       "Secret"
        	metadata: {
        		name:      context.name
        		namespace: context.namespace
        		labels: {
        			"config.oam.dev/catalog":       "velacore-config"
        			"config.oam.dev/type":          "image-registry"
        			"config.oam.dev/multi-cluster": "true"
        			"config.oam.dev/identifier":    parameter.registry
        			"config.oam.dev/sub-type":      "auth"
        		}
        	}
        	if parameter.auth != _|_ {
        		type: "kubernetes.io/dockerconfigjson"
        	}
        	if parameter.auth == _|_ {
        		type: "Opaque"
        	}
        	stringData: {
        		if parameter.auth != _|_ && parameter.auth.username != _|_ {
        			".dockerconfigjson": json.Marshal({
        				auths: "\(parameter.registry)": {
        					username: parameter.auth.username
        					password: parameter.auth.password
        					if parameter.auth.email != _|_ {
        						email: parameter.auth.email
        					}
        					auth: base64.Encode(null, (parameter.auth.username + ":" + parameter.auth.password))
        				}
        			})
        		}
        		if parameter.insecure != _|_ {
        			"insecure-skip-verify": strconv.FormatBool(parameter.insecure)
        		}
        		if parameter.useHTTP != _|_ {
        			"protocol-use-http": strconv.FormatBool(parameter.useHTTP)
        		}
        	}
        }
        parameter: {
        	// +usage=Image registry FQDN, such as: index.docker.io
        	registry: string
        	// +usage=Authenticate the image registry
        	auth?: {
        		// +usage=Private Image registry username
        		username: string
        		// +usage=Private Image registry password
        		password: string
        		// +usage=Private Image registry email
        		email?: string
        	}
        	// +usage=For the registry server that uses the self-signed certificate
        	insecure?: bool
        	// +usage=For the registry server that uses the HTTP protocol
        	useHTTP?: bool
        }
  workload:
    type: autodetects.core.oam.dev

