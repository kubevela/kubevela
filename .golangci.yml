version: "2"

run:
  timeout: 10m

linters:
  enable:
    - megacheck
    - govet
    - gocyclo
    - gocritic
    - goconst
    - goimports
    - gofmt  # We enable this as well as goimports for its simplify mode.
    - revive
    - unconvert
    - misspell
    - nakedret
    - exportloopref
  disable:
    - deadcode
    - scopelint
    - structcheck
    - varcheck
    - rowserrcheck
    - sqlclosecheck
    - errchkjson
    - contextcheck


issues:
  # Excluding configuration per-path and per-linter
  exclude-files:
    - "zz_generated\\..+\\.go$"
    - ".*_test.go$"

  exclude-dirs:
    - "hack"
    - "e2e"
  
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test(ing)?\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - exportloopref
        - unparam

    # Ease some gocritic warnings on test files.
    - path: _test\.go
      text: "(unnamedResult|exitAfterDefer)"
      linters:
        - gocritic

    # Gosmopolitan complains of internationalization issues on the file that actually defines
    # the translation.
    - path: i18n\.go
      text: "Han"
      linters:
        - gosmopolitan

    # These are performance optimisations rather than style issues per se.
    # They warn when function arguments or range values copy a lot of memory
    # rather than using a pointer.
    - text: "(hugeParam|rangeValCopy):"
      linters:
        - gocritic

    # This "TestMain should call os.Exit to set exit code" warning is not clever
    # enough to notice that we call a helper method that calls os.Exit.
    - text: "SA3000:"
      linters:
        - staticcheck

    - text: "k8s.io/api/core/v1"
      linters:
        - goimports

    # This is a "potential hardcoded credentials" warning. It's triggered by
    # any variable with 'secret' in the same, and thus hits a lot of false
    # positives in Kubernetes land where a Secret is an object type.
    - text: "G101:"
      linters:
        - gosec
        - gas

    # This is an 'errors unhandled' warning that duplicates errcheck.
    - text: "G104:"
      linters:
        - gosec
        - gas

    # The Azure AddToUserAgent method appends to the existing user agent string.
    # It returns an error if you pass it an empty string lettinga you know the
    # user agent did not change, making it more of a warning.
    - text: \.AddToUserAgent
      linters:
        - errcheck

    - text: "don't use an underscore"
      linters:
        - revive

    - text: "package-comments: should have a package comment"
      linters:
        - revive

    - text: "error-strings: error strings should not be capitalized or end with punctuation or a newline"
      linters:
        - revive

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0
