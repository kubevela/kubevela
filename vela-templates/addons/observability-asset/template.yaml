apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  annotations:
    addons.oam.dev/description: Some nessecerry X-definition for observability addon
  name: observability-asset
  namespace: vela-system
spec:
  workflow:
    steps:
      - name: apply-ns
        type: apply-component
        properties:
          component: ns-observability
      - name: apply-resources
        type: apply-remaining
  components:
    - name: ns-observability
      type: raw
      properties:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: observability
    - name: import-grafana-dashboard-traitdef
      type: raw
      properties:
        apiVersion: core.oam.dev/v1beta1
        kind: TraitDefinition
        metadata:
          annotations:
            definition.oam.dev/description: "Import dashboards to Grafana"
          name: import-grafana-dashboard
          namespace: vela-system
        spec:
          schematic:
            cue:
              template: |
                outputs: registerdatasource: {
                	apiVersion: "grafana.extension.oam.dev/v1alpha1"
                	kind:       "ImportDashboard"
                	spec: {
                		grafana: {
                			service:                   parameter.grafanaServiceName
                			namespace:                 parameter.grafanaServiceNamespace
                			credentialSecret:          parameter.credentialSecret
                			credentialSecretNamespace: parameter.credentialSecretNamespace
                		}
                		urls: parameter.urls
                	}
                }
                parameter: {
                	grafanaServiceName:        string
                	grafanaServiceNamespace:   *"default" | string
                	credentialSecret:          string
                	credentialSecretNamespace: *"default" | string
                	urls: [...string]
                }
    - name: pure-ingress-traitdef
      type: raw
      properties:
        apiVersion: core.oam.dev/v1beta1
        kind: TraitDefinition
        metadata:
          annotations:
            definition.oam.dev/description: "Enable public web traffic for the component without creating a Service."
          name: pure-ingress
          namespace: vela-system
        spec:
          status:
            customStatus: |-
              let igs = context.outputs.ingress.status.loadBalancer.ingress
              if igs == _|_ {
                message: "No loadBalancer found, visiting by using 'vela port-forward " + context.appName + " --route'\n"
              }
              if len(igs) > 0 {
                if igs[0].ip != _|_ {
                  message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host + ", IP: " + igs[0].ip
                }
                if igs[0].ip == _|_ {
                  message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host
                }
              }
          schematic:
            cue:
              template: |
                outputs: ingress: {
                	apiVersion: "networking.k8s.io/v1beta1"
                	kind:       "Ingress"
                	metadata:
                	    name: context.name
                	spec: {
                		rules: [{
                			host: parameter.domain
                			http: {
                				paths: [
                					for k, v in parameter.http {
                						path: k
                						backend: {
                							serviceName: context.name
                							servicePort: v
                						}
                					},
                				]
                			}
                		}]
                	}
                }

                parameter: {
                	// +usage=Specify the domain you want to expose
                	domain: string

                	// +usage=Specify the mapping relationship between the http path and the workload port
                	http: [string]: int
                }
    - name: register-grafana-datasource-traitdef
      type: raw
      properties:
        apiVersion: core.oam.dev/v1beta1
        kind: TraitDefinition
        metadata:
          annotations:
            definition.oam.dev/description: "Add a datasource to Grafana"
          name: register-grafana-datasource
          namespace: vela-system
        spec:
          schematic:
            cue:
              template: |
                outputs: registerdatasource: {
                	apiVersion: "grafana.extension.oam.dev/v1alpha1"
                	kind:       "DatasourceRegistration"
                	spec: {
                		grafana: {
                			service:                   parameter.grafanaServiceName
                			namespace:                 parameter.grafanaServiceNamespace
                			credentialSecret:          parameter.credentialSecret
                			credentialSecretNamespace: parameter.credentialSecretNamespace
                		}
                		datasource: {
                			name:      parameter.name
                			type:      parameter.type
                			access:    parameter.access
                			service:   parameter.service
                			namespace: parameter.namespace
                		}
                	}
                }

                parameter: {
                	grafanaServiceName:        string
                	grafanaServiceNamespace:   *"default" | string
                	credentialSecret:          string
                	credentialSecretNamespace: string
                	name:                      string
                	type:                      string
                	access:                    *"proxy" | string
                	service:                   string
                	namespace:                 *"default" | string
                }

{{ range .ResourceFiles }}
    - name: {{ .Name }}
      type: raw
      properties:
{{ .Content | indent 8 }} {{ end }}
{{ range .DefinitionFiles }}
    - name: {{ .Name }}
      type: raw
      properties:
{{ .Content | indent 8 }} {{ end }}
