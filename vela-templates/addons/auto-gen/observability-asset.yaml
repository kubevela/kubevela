apiVersion: core.oam.dev/v1beta1
kind: Initializer
metadata:
  annotations:
    addons.oam.dev/description: Preparations that observability need
  name: observability-asset
  namespace: vela-system
spec:
  appTemplate:
    spec:
      components:
      - name: observability
        properties:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: observability
        type: raw
      - name: import-grafana-dashboard
        properties:
          apiVersion: core.oam.dev/v1beta1
          kind: TraitDefinition
          metadata:
            annotations:
              definition.oam.dev/description: Import dashboards to Grafana
            name: import-grafana-dashboard
            namespace: vela-system
          spec:
            schematic:
              cue:
                template: "outputs: registerdatasource: {\n\tapiVersion: \"grafana.extension.oam.dev/v1alpha1\"\n\tkind:
                  \      \"ImportDashboard\"\n\tspec: {\n\t\tgrafana: {\n\t\t\tservice:
                  \                  parameter.grafanaServiceName\n\t\t\tnamespace:
                  \                parameter.grafanaServiceNamespace\n\t\t\tcredentialSecret:
                  \         parameter.credentialSecret\n\t\t\tcredentialSecretNamespace:
                  parameter.credentialSecretNamespace\n\t\t}\n\t\turls: parameter.urls\n\t}\n}\nparameter:
                  {\n\tgrafanaServiceName:        string\n\tgrafanaServiceNamespace:
                  \  *\"default\" | string\n\tcredentialSecret:          string\n\tcredentialSecretNamespace:
                  *\"default\" | string\n\turls: [...string]\n} \n"
        type: raw
      - name: pure-ingress
        properties:
          apiVersion: core.oam.dev/v1beta1
          kind: TraitDefinition
          metadata:
            annotations:
              definition.oam.dev/description: Enable public web traffic for the component
                without creating a Service.
            name: pure-ingress
            namespace: vela-system
          spec:
            schematic:
              cue:
                template: "\noutputs: ingress: {\n\tapiVersion: \"networking.k8s.io/v1beta1\"\n\tkind:
                  \      \"Ingress\"\n\tmetadata:\n\t\tname: context.name\n\tspec:
                  {\n\t\trules: [{\n\t\t\thost: parameter.domain\n\t\t\thttp: {\n\t\t\t\tpaths:
                  [\n\t\t\t\t\tfor k, v in parameter.http {\n\t\t\t\t\t\tpath: k\n\t\t\t\t\t\tbackend:
                  {\n\t\t\t\t\t\t\tserviceName: context.name\n\t\t\t\t\t\t\tservicePort:
                  v\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n\nparameter:
                  {\n\t// +usage=Specify the domain you want to expose\n\tdomain:
                  string\n\n\t// +usage=Specify the mapping relationship between the
                  http path and the workload port\n\thttp: [string]: int\n}\n"
            status:
              customStatus: |-
                let igs = context.outputs.ingress.status.loadBalancer.ingress
                if igs == _|_ {
                  message: "No loadBalancer found, visiting by using 'vela port-forward " + context.appName + " --route'\n"
                }
                if len(igs) > 0 {
                  if igs[0].ip != _|_ {
                    message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host + ", IP: " + igs[0].ip
                  }
                  if igs[0].ip == _|_ {
                    message: "Visiting URL: " + context.outputs.ingress.spec.rules[0].host
                  }
                }
              healthPolicy: |
                isHealth: len(context.outputs.ingress.status.loadBalancer.ingress) > 0
        type: raw
      - name: register-grafana-datasource
        properties:
          apiVersion: core.oam.dev/v1beta1
          kind: TraitDefinition
          metadata:
            annotations:
              definition.oam.dev/description: Add a datasource to Grafana
            name: register-grafana-datasource
            namespace: vela-system
          spec:
            schematic:
              cue:
                template: "outputs: registerdatasource: {\n\tapiVersion: \"grafana.extension.oam.dev/v1alpha1\"\n\tkind:
                  \      \"DatasourceRegistration\"\n\tspec: {\n\t\tgrafana: {\n\t\t\tservice:
                  \                  parameter.grafanaServiceName\n\t\t\tnamespace:
                  \                parameter.grafanaServiceNamespace\n\t\t\tcredentialSecret:
                  \         parameter.credentialSecret\n\t\t\tcredentialSecretNamespace:
                  parameter.credentialSecretNamespace\n\t\t}\n\t\tdatasource: {\n\t\t\tname:
                  \     parameter.name\n\t\t\ttype:      parameter.type\n\t\t\taccess:
                  \   parameter.access\n\t\t\tservice:   parameter.service\n\t\t\tnamespace:
                  parameter.namespace\n\t\t}\n\t}\n}\n\nparameter: {\n\tgrafanaServiceName:
                  \       string\n\tgrafanaServiceNamespace:   *\"default\" | string\n\tcredentialSecret:
                  \         string\n\tcredentialSecretNamespace: string\n\tname:                      string\n\ttype:
                  \                     string\n\taccess:                    *\"proxy\"
                  | string\n\tservice:                   string\n\tnamespace:                 *\"default\"
                  | string\n}\n"
        type: raw
    status: {}
status:
  observedGeneration: 0
